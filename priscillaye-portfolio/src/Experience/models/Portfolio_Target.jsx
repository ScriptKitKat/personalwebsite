/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 Portfolio_Target.glb 
*/

import React from 'react'
import { useGLTF } from '@react-three/drei'
import gsap from "gsap";
import { convertMaterialsToBasic } from '../utils/convertToBasic'
import { useNavigate } from "react-router";

export default function Model(props) {
  const { nodes, materials } = useGLTF('/models/Portfolio_Target.glb')

  const newMaterials = convertMaterialsToBasic(materials);
  let navigate = useNavigate();

  console.log(nodes["target_about_button_three"]);
  // Create refs for each mesh
  const meshRefs = React.useRef({});

  const onHover = (name, isHovered) => {
    const mesh = meshRefs.current[name];
    if (!mesh) return;

    // Store initial scale/rotation if not already set
    if (!mesh.userData.initialScale) {
      mesh.userData.initialScale = {
        x: mesh.scale.x,
        y: mesh.scale.y,
        z: mesh.scale.z,
      };
    }
    if (!mesh.userData.initialRotation) {
      mesh.userData.initialRotation = {
        x: mesh.rotation.x,
        y: mesh.rotation.y,
        z: mesh.rotation.z,
      };
    }

    let scale = 1.4;
    gsap.killTweensOf(mesh.scale);
    gsap.killTweensOf(mesh.rotation);
    gsap.killTweensOf(mesh.position);

    if (isHovered) {
      if (name.includes("bible")) {
        scale = 1;
      }
      if (name.includes("snake_plant") || name.includes("mailbox")) {
        scale = 1.1;
      }
      gsap.to(mesh.scale, {
        x: mesh.userData.initialScale.x * scale,
        y: mesh.userData.initialScale.y * scale,
        z: mesh.userData.initialScale.z * scale,
        duration: 0.5,
        ease: "back.out(2)",
      });

      if (name.includes("about")) {
        gsap.to(mesh.rotation, {
          x: mesh.userData.initialRotation.x - Math.PI / 8,
          duration: 0.5,
          ease: "back.out(2)",
        });
      } else if (
        name.includes("contact") ||
        name.includes("mywork") ||
        name.includes("github") ||
        name.includes("youtube") ||
        name.includes("linkedin")
      ) {
        gsap.to(mesh.rotation, {
          x: mesh.userData.initialRotation.x + Math.PI / 8,
          duration: 0.5,
          ease: "back.out(2)",
        });
      } else if (name.includes("bible")) {
        gsap.to(mesh.rotation, {
          y: mesh.userData.initialRotation.y - Math.PI / 6,
          duration: 0.5,
          ease: "back.out(2)",
        });
      }
    } else {
      gsap.to(mesh.scale, {
        x: mesh.userData.initialScale.x,
        y: mesh.userData.initialScale.y,
        z: mesh.userData.initialScale.z,
        duration: 0.3,
        ease: "back.out(2)",
      });

      if (
        name.includes("about") ||
        name.includes("contact") ||
        name.includes("mywork") ||
        name.includes("github") ||
        name.includes("youtube") ||
        name.includes("linkedin")
      ) {
        gsap.to(mesh.rotation, {
          x: mesh.userData.initialRotation.x,
          duration: 0.5,
          ease: "back.out(2)",
        });
      }
      if (name.includes("bible")) {
        gsap.to(mesh.rotation, {
          y: mesh.userData.initialRotation.y,
          duration: 0.5,
          ease: "back.out(2)",
        });
      }
    }
  }
  return (
    <group {...props} dispose={null}>
      <mesh
        ref={ref => meshRefs.current["target_snake_plant_two"] = ref}
        geometry={nodes.target_snake_plant_two.geometry}
        material={newMaterials['Texture Set Two']}
        position={[2.326, 2.868, -3.02]}
        onPointerOver={() => onHover("target_snake_plant_two", true)}
        onPointerOut={() => onHover("target_snake_plant_two", false)}
      />
      <mesh
        ref={ref => meshRefs.current["target_about_button_three"] = ref}
        geometry={nodes.target_about_button_three.geometry}
        material={newMaterials['Texture Set Three']}
        position={[-4.995, 7.758, 5.465]}
        rotation={[-1.43, -0.03, -1.778]}
        onPointerOver={() => {
          onHover("target_about_button_three", true);
          document.body.style.cursor = "pointer";
        }}
        onPointerOut={() => {
          onHover("target_about_button_three", false);
          document.body.style.cursor = "default";
        }}
        onClick={() => {
          navigate("/about");
        }}
      />
      <mesh
        ref={ref => meshRefs.current["target_bible_button_three"] = ref}
        geometry={nodes.target_bible_button_three.geometry}
        material={newMaterials['Texture Set Three']}
        position={[-2.674, 4.173, 2.006]}
        rotation={[Math.PI / 2, Math.PI / 2, 0]}
        onPointerOver={() => {
          onHover("target_bible_button_three", true);
          document.body.style.cursor = "pointer";
        }}
        onPointerOut={() => {
          onHover("target_bible_button_three", false);
          document.body.style.cursor = "default";
        }}
        onClick={() => {
          navigate("/bible");
        }}
      />
      <mesh
        ref={ref => meshRefs.current["target_binoculars_three"] = ref}
        geometry={nodes.target_binoculars_three.geometry}
        material={newMaterials['Texture Set Three']}
        position={[3.6, 8.254, -2.744]}
        onPointerOver={() => {
          onHover("target_binoculars_three", true);
          document.body.style.cursor = "pointer";
        }}
        onPointerOut={() => {
          onHover("target_binoculars_three", false);
        }}
      />
      <mesh
        ref={ref => meshRefs.current["target_contact_button_three"] = ref}
        geometry={nodes.target_contact_button_three.geometry}
        material={newMaterials['Texture Set Three']}
        position={[-4.991, 6.788, 5.446]}
        rotation={[-1.676, 0.022, -1.779]}
        onPointerOver={() => {
          onHover("target_contact_button_three", true);
          document.body.style.cursor = "pointer";
        }}
        onPointerOut={() => {
          onHover("target_contact_button_three", false);
          document.body.style.cursor = "default";
        }}
        onClick={() => {
          navigate("/contact");
        }}
      />
      <mesh
        ref={ref => meshRefs.current["target_cookie_three"] = ref}
        geometry={nodes.target_cookie_three.geometry}
        material={newMaterials['Texture Set Three']}
        position={[-3.353, 5.071, -2.197]}
        rotation={[Math.PI / 2, 0, 0.381]}
        onPointerOver={() => onHover("target_cookie_three", true)}
        onPointerOut={() => onHover("target_cookie_three", false)}
      />
      <mesh
        ref={ref => meshRefs.current["target_cross_three"] = ref}
        geometry={nodes.target_cross_three.geometry}
        material={newMaterials['Texture Set Three']}
        position={[-4.168, 9.264, -1.817]}
        rotation={[0.008, 0.056, 0.221]}
        onPointerOver={() => onHover("target_cross_three", true)}
        onPointerOut={() => onHover("target_cross_three", false)}
      />
      <mesh
        ref={ref => meshRefs.current["target_flower_1_three"] = ref}
        geometry={nodes.target_flower_1_three.geometry}
        material={newMaterials['Texture Set Three']}
        position={[-3.792, 5.377, -3.442]}
        rotation={[0.244, -0.219, -0.051]}
        onPointerOver={() => onHover("target_flower_1_three", true)}
        onPointerOut={() => onHover("target_flower_1_three", false)}
      />
      <mesh
        ref={ref => meshRefs.current["target_flower_2_three"] = ref}
        geometry={nodes.target_flower_2_three.geometry}
        material={newMaterials['Texture Set Three']}
        position={[-3.875, 5.526, -3.464]}
        onPointerOver={() => onHover("target_flower_2_three", true)}
        onPointerOut={() => onHover("target_flower_2_three", false)}
      />
      <mesh
        ref={ref => meshRefs.current["target_flower_3_three"] = ref}
        geometry={nodes.target_flower_3_three.geometry}
        material={newMaterials['Texture Set Three']}
        position={[-3.752, 5.787, -3.317]}
        rotation={[-0.812, -0.645, -1.897]}
        onPointerOver={() => onHover("target_flower_3_three", true)}
        onPointerOut={() => onHover("target_flower_3_three", false)}
      />
      <mesh
        ref={ref => meshRefs.current["target_ginger_three"] = ref}
        geometry={nodes.target_ginger_three.geometry}
        material={newMaterials['Texture Set Three']}
        position={[-3.383, 5.094, -0.326]}
        rotation={[1.706, 0, -0.64]}
        onPointerOver={() => onHover("target_ginger_three", true)}
        onPointerOut={() => onHover("target_ginger_three", false)}
      />
      <mesh
        ref={ref => meshRefs.current["target_github_button_three"] = ref}
        geometry={nodes.target_github_button_three.geometry}
        material={newMaterials['Texture Set Three']}
        position={[-3.816, 8.571, -3.521]}
        rotation={[1.072, -0.016, 0.008]}
        onPointerOver={() => {
          onHover("target_github_button_three", true);
          document.body.style.cursor = "pointer";
        }}
        onPointerOut={() => {
          onHover("target_github_button_three", false);
          document.body.style.cursor = "default";
        }}
        onClick={() => {
          window.open("https://github.com/ScriptKitKat", "_blank", "noopener,noreferrer");
        }}
      />
      <mesh
        ref={ref => meshRefs.current["target_linkedin_button_three"] = ref}
        geometry={nodes.target_linkedin_button_three.geometry}
        material={newMaterials['Texture Set Three']}
        position={[-2.713, 8.589, -3.53]}
        rotation={[1.074, 0, 0]}
        onPointerOver={() => {
          onHover("target_linkedin_button_three", true);
          document.body.style.cursor = "pointer";
        }}
        onPointerOut={() => {
          onHover("target_linkedin_button_three", false);
          document.body.style.cursor = "default";
        }}
        onClick={() => {
          window.open("https://www.linkedin.com/in/priscillaye/", "_blank", "noopener,noreferrer");
        }}
      />
      <mesh
        ref={ref => meshRefs.current["target_mywork_button_three"] = ref}
        geometry={nodes.target_mywork_button_three.geometry}
        material={newMaterials['Texture Set Three']}
        position={[-4.992, 8.74, 5.453]}
        rotation={[-Math.PI / 2, 0, -1.78]}
        onPointerOver={() => {
          onHover("target_mywork_button_three", true);
          document.body.style.cursor = "pointer";
        }}
        onPointerOut={() => {
          onHover("target_mywork_button_three", false);
          document.body.style.cursor = "default";
        }}
        onClick={() => {
          navigate("/work");
        }}
      />
      <mesh
        ref={ref => meshRefs.current["target_youtube_button_three"] = ref}
        geometry={nodes.target_youtube_button_three.geometry}
        material={newMaterials['Texture Set Three']}
        position={[-1.626, 8.585, -3.534]}
        rotation={[1.077, 0, 0]}
        onPointerOver={() => {
          onHover("target_youtube_button_three", true);
          document.body.style.cursor = "pointer";
        }}
        onPointerOut={() => {
          onHover("target_youtube_button_three", false);
          document.body.style.cursor = "default";
        }}
        onClick={() => {
          window.open("https://www.youtube.com/@itsprye", "_blank", "noopener,noreferrer");
        }}
      />
      <mesh
        ref={ref => meshRefs.current["target_korea_flag_four"] = ref}
        geometry={nodes.target_korea_flag_four.geometry}
        material={newMaterials['Texture Set Four']}
        position={[-3.165, 6.573, 2.065]}
        rotation={[1.808, 0.18, 2.208]}
        onPointerOver={() => onHover("target_korea_flag_four", true)}
        onPointerOut={() => onHover("target_korea_flag_four", false)}
      />
      <mesh
        ref={ref => meshRefs.current["target_malay_flag_four"] = ref}
        geometry={nodes.target_malay_flag_four.geometry}
        material={newMaterials['Texture Set Four']}
        position={[-3.135, 6.551, 2.05]}
        rotation={[1.333, -0.18, -0.934]}
        onPointerOver={() => onHover("target_malay_flag_four", true)}
        onPointerOut={() => onHover("target_malay_flag_four", false)}
      />
      <mesh
        ref={ref => meshRefs.current["target_mailbox_button_two"] = ref}
        geometry={nodes.target_mailbox_button_two.geometry}
        material={newMaterials['Texture Set Two']}
        position={[6.102, 1.395, -3.348]}
        onPointerOver={() => {
          onHover("target_mailbox_button_two", true);
          document.body.style.cursor = "pointer";
        }}
        onPointerOut={() => {
          onHover("target_mailbox_button_two", false);
          document.body.style.cursor = "default";
        }}
        onClick={() => {
          navigate("/contact");
        }}
      />
    </group>
  );
}

useGLTF.preload('/Portfolio_Target.glb');
